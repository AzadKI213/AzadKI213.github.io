---
import '../../styles/global.css';

const PAGE_SIZE = 12;
const showDrafts = Astro.request.url.includes('drafts=1');

const all = await Astro.glob('../../content/blog/**/*.md');
const posts = all
  .filter((p) => (showDrafts ? true : p.frontmatter?.draft !== true))
  .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));

export async function getStaticPaths() {
  const total = posts.length;
  const pages = Math.max(1, Math.ceil(total / PAGE_SIZE));
  return Array.from({ length: pages }, (_, i) => ({
    params: { page: String(i + 1) },
    props: { page: i + 1, pages, total }
  })).map((p, idx) => (idx === 0 ? { params: {}, props: p.props } : p));
}

const current = Astro.props.page || 1;
const totalPages = Astro.props.pages;
const start = (current - 1) * PAGE_SIZE;
const pagePosts = posts.slice(start, start + PAGE_SIZE);

const base = Astro.site?.pathname || '/';
const link = (p) => `${base}${p}`.replace('//', '/');
const pageUrl = (n) => (n === 1 ? link('blog/') : link(`blog/${n}`));

const SITE_TITLE = 'Frost Journal';
---

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Archive · {SITE_TITLE}</title>
  <meta name="description" content="Browse every published post." />
  <link rel="icon" href={link('favicon.svg')} />
  <link rel="stylesheet" href={link('src/styles/global.css')} />
  <meta property="og:title" content={`Archive · ${SITE_TITLE}`} />
  <meta property="og:description" content="Browse every published post." />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={new URL(Astro.request.url, Astro.site ?? 'http://localhost/').toString()} />
</head>
<body>
  <div class="container">
    <nav class="nav" aria-label="Primary">
      <a class="brand" href={link('')}>
        <svg viewBox="0 0 64 64" aria-hidden="true" focusable="false">
          <defs>
            <linearGradient id="aurora" x1="0" x2="1">
              <stop offset="0%" stop-color="#4b6fae" />
              <stop offset="100%" stop-color="#7aa6d9" />
            </linearGradient>
          </defs>
          <rect x="10" y="18" width="44" height="28" rx="14" fill="none" stroke="url(#aurora)" stroke-width="3" />
          <path d="M16 32 L32 22 L48 32" fill="none" stroke="url(#aurora)" stroke-width="3" stroke-linecap="round" />
        </svg>
        <span>{SITE_TITLE.toUpperCase()}</span>
      </a>
      <div class="menu">
        <a class="chip" href={link('#writing')}>Writing</a>
        <a class="chip" href={link('#about')}>About</a>
        <a class="chip" href={link('#workflow')}>Workflow</a>
        <a class="chip" href={link('blog/')}>Archive</a>
      </div>
    </nav>

    <main class="card">
      <h1 style="margin:0 0 12px;font-size:1.6rem;">Archive</h1>
      <p class="meta">All posts in reverse chronological order.</p>
      {pagePosts.length === 0 ? (
        <p>No posts yet.</p>
      ) : (
        <ul class="post-list" aria-label="All posts">
          {pagePosts.map((p) => {
            const slug = p.file.split('/').pop().replace(/\.md$/, '');
            const url = link(`blog/${slug}/`);
            return (
              <li>
                <a class="title" href={url}>{p.frontmatter.title}</a>
                <span class="meta">{new Date(p.frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' })}</span>
              </li>
            );
          })}
        </ul>
      )}

      <div class="pagination">
        <span>Page {current} of {totalPages}</span>
        <div class="cta">
          {current > 1 && <a class="btn" href={pageUrl(current - 1)}>← Previous</a>}
          {current < totalPages && <a class="btn" href={pageUrl(current + 1)}>Next →</a>}
        </div>
      </div>
    </main>
  </div>
</body>
</html>
